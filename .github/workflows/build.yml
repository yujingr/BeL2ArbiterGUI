name: Build and Release Electron App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Add permissions block at the workflow level
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x64
          - os: windows-latest
            arch: x64
          - os: ubuntu-latest
            arch: x64
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm
    
    - name: Get current date
      id: date
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        else
          echo "VERSION=$(Get-Date -Format "yyyy.MM.dd")" >> $env:GITHUB_ENV
        fi
      shell: bash
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build Electron app
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_BUILDER_MAINTAINER: "maintainer@example.com"
        ELECTRON_BUILDER_AUTHOR_EMAIL: "author@example.com"
        ARCH: ${{ matrix.arch }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: |
          dist/*.dmg
          dist/*.exe
          dist/*.zip
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        if-no-files-found: ignore

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Get current date
      id: date
      run: echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare Release Files
      run: |
        mkdir release-files
        # Rename files to include architecture
        for file in **/*.dmg **/*.exe **/*.zip **/*.AppImage **/*.deb **/*.rpm; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            dirname=$(dirname "$file")
            arch=$(echo "$dirname" | grep -o 'arm64\|x64')
            ext="${filename##*.}"
            newname="${filename%.*}-${arch}.${ext}"
            cp "$file" "release-files/$newname"
          fi
        done
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: release-files/*
        body: |
          Automated release for version ${{ env.VERSION }}
          
          This release was automatically generated on $(date +'%Y-%m-%d %H:%M:%S')
          
          ### Changes in this release:
          - Automated build from main branch
          - Version based on date: ${{ env.VERSION }}
          
          ### Available Downloads:
          - macOS ARM64 (Apple Silicon): *-arm64.dmg, *-arm64.zip
          - macOS Intel: *-x64.dmg, *-x64.zip
          - Windows: *-x64.exe
          - Linux: *-x64.AppImage, *-x64.deb, *-x64.rpm
