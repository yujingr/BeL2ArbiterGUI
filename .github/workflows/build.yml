name: Build and Release Electron App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Add permissions block at the workflow level
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x64
          - os: windows-latest
            arch: x64
          - os: ubuntu-latest
            arch: x64
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Linux Dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm
    
    - name: Get current date
      id: date
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "VERSION=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_ENV
        else
          echo "VERSION=$(Get-Date -Format "yyyy.MM.dd.HHmm")" >> $env:GITHUB_ENV
        fi
      shell: bash
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build Electron app
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ELECTRON_BUILDER_MAINTAINER: "maintainer@example.com"
        ELECTRON_BUILDER_AUTHOR_EMAIL: "author@example.com"
        ARCH: ${{ matrix.arch }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}-build
        path: |
          dist/*.dmg
          dist/*.exe
          dist/*.zip
          dist/*.AppImage
          dist/*.deb
          dist/*.rpm
        if-no-files-found: ignore

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Get current date
      id: date
      run: echo "VERSION=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_ENV
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare Release Files
      run: |
        # Clean up any existing directories
        rm -rf release-files
        mkdir -p release-files/macos/{arm64,intel}
        mkdir -p release-files/{windows,linux}
        
        # Create a temporary directory for processing
        rm -rf temp_files
        mkdir -p temp_files
        
        # Debug: List all available files
        echo "Available files before processing:"
        find . -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \)
        
        # First, collect all files and rename them consistently
        for file in */*/*.dmg */*/*.exe */*/*.zip */*/*.AppImage */*/*.deb */*/*.rpm; do
          if [ -f "$file" ]; then
            echo "Processing file: $file"
            filename=$(basename "$file")
            dirname=$(dirname "$file")
            arch=$(echo "$dirname" | grep -o 'arm64\|x64')
            
            # Debug
            echo "Filename: $filename"
            echo "Directory: $dirname"
            echo "Architecture: $arch"
            
            # Strip any existing architecture suffixes first
            basename="${filename%.*}"
            basename="${basename%-arm64}"
            basename="${basename%-x64}"
            basename="${basename%-mac-arm64}"
            basename="${basename%-mac-x64}"
            basename="${basename%-amd64}"
            basename="${basename%-x86_64}"
            basename="${basename% Setup}"
            basename="${basename%-1.0.0}"  # Remove version if present
            
            ext="${filename##*.}"
            version="1.0.0"
            
            # Create consistent naming pattern and determine platform directory
            case "$ext" in
              "dmg"|"zip")
                newname="${basename}-${version}-${arch}.${ext}"
                if [ "$arch" = "arm64" ]; then
                  platform_dir="macos/arm64"
                else
                  platform_dir="macos/intel"
                fi
                ;;
              "exe")
                if [[ $filename == *"Setup"* ]]; then
                  newname="${basename} Setup-${version}-${arch}.${ext}"
                else
                  newname="${basename}-${version}-${arch}.${ext}"
                fi
                platform_dir="windows"
                ;;
              "AppImage"|"deb"|"rpm")
                case "$ext" in
                  "AppImage")
                    newname="${basename}-${version}-${arch}.${ext}"
                    ;;
                  "deb")
                    newname="${basename}_${version}_amd64.${ext}"
                    ;;
                  "rpm")
                    newname="${basename}-${version}.x86_64.${ext}"
                    ;;
                esac
                platform_dir="linux"
                ;;
            esac
            
            # Debug
            echo "New name: $newname"
            echo "Platform dir: $platform_dir"
            
            # Create platform directory if it doesn't exist
            mkdir -p "release-files/${platform_dir}"
            
            # Copy directly to final location
            cp "$file" "release-files/${platform_dir}/${newname}"
            
            echo "Copied to: release-files/${platform_dir}/${newname}"
          fi
        done
        
        # Debug: List final structure
        echo "Final directory structure:"
        find release-files -type f
        
        # List final files by platform
        echo "Final release files:"
        echo "macOS (ARM64):"
        ls -la release-files/macos/arm64/ || echo "Directory empty"
        echo "macOS (Intel):"
        ls -la release-files/macos/intel/ || echo "Directory empty"
        echo "Windows:"
        ls -la release-files/windows/ || echo "Directory empty"
        echo "Linux:"
        ls -la release-files/linux/ || echo "Directory empty"
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: release-files/**/*
        body: |
          Automated release for version ${{ env.VERSION }}
          
          This release was automatically generated on $(date +'%Y-%m-%d %H:%M:%S')
          
          ### Changes in this release:
          - Automated build from main branch
          - Version based on date: ${{ env.VERSION }}
          
          ### Available Downloads:
          #### macOS
          - Apple Silicon (ARM64):
            - `Arbiter Signer-1.0.0-arm64.dmg`
            - `Arbiter Signer-1.0.0-arm64.zip`
          - Intel (x64):
            - `Arbiter Signer-1.0.0-x64.dmg`
            - `Arbiter Signer-1.0.0-x64.zip`
          
          #### Windows
          - Intel/AMD (x64):
            - `Arbiter Signer Setup-1.0.0-x64.exe`
            - `Arbiter Signer-1.0.0-x64.exe`
          
          #### Linux
          - x64:
            - `Arbiter Signer-1.0.0-x64.AppImage`
            - `arbiter-signer_1.0.0_amd64.deb`
            - `arbiter-signer-1.0.0.x86_64.rpm`
